#!/usr/bin/env python3
"""
Script para gerar execut√°vel Windows (.exe) do Conversor de V√≠deo/√Åudio
Usa PyInstaller para criar um √∫nico arquivo execut√°vel
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def main():
    """Gera o execut√°vel Windows"""
    
    print("=" * 70)
    print("üöÄ Gerador de Execut√°vel Windows - Conversor de V√≠deo/√Åudio")
    print("=" * 70)
    print()
    
    # Verifica se PyInstaller est√° instalado
    try:
        import PyInstaller
        print("‚úÖ PyInstaller detectado")
    except ImportError:
        print("‚ùå PyInstaller n√£o encontrado!")
        print("üì¶ Instalando PyInstaller...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("‚úÖ PyInstaller instalado com sucesso!")
    
    print()
    
    # Configura√ß√µes
    app_name = "ConversorVideoAudio"
    main_script = "main.py"
    icon_file = "icon.ico"  # Opcional
    
    # Verifica se o script principal existe
    if not os.path.exists(main_script):
        print(f"‚ùå Erro: {main_script} n√£o encontrado!")
        sys.exit(1)
    
    print(f"üìù Arquivo principal: {main_script}")
    print(f"üì¶ Nome do execut√°vel: {app_name}.exe")
    print()
    
    # Remove builds anteriores
    print("üßπ Limpando builds anteriores...")
    for folder in ['build', 'dist', '__pycache__']:
        if os.path.exists(folder):
            shutil.rmtree(folder)
            print(f"   Removido: {folder}/")
    
    # Remove arquivos .spec antigos
    spec_file = f"{app_name}.spec"
    if os.path.exists(spec_file):
        os.remove(spec_file)
        print(f"   Removido: {spec_file}")
    
    print("‚úÖ Limpeza conclu√≠da!")
    print()
    
    # Comandos do PyInstaller
    print("üî® Construindo execut√°vel...")
    print("   Isso pode levar alguns minutos...")
    print()
    
    pyinstaller_args = [
        'pyinstaller',
        '--name', app_name,
        '--onefile',  # Um √∫nico arquivo execut√°vel
        '--windowed',  # Sem console (apenas GUI)
        '--clean',  # Limpa cache antes de build
        '--noconfirm',  # N√£o pede confirma√ß√£o
    ]
    
    # Adiciona √≠cone se existir
    if os.path.exists(icon_file):
        pyinstaller_args.extend(['--icon', icon_file])
        print(f"   üé® Usando √≠cone: {icon_file}")
    
    # Adiciona dados necess√°rios (se houver)
    # pyinstaller_args.extend(['--add-data', 'recursos:recursos'])
    
    # Script principal
    pyinstaller_args.append(main_script)
    
    # Executa PyInstaller
    try:
        subprocess.check_call(pyinstaller_args)
        print()
        print("=" * 70)
        print("‚úÖ EXECUT√ÅVEL GERADO COM SUCESSO!")
        print("=" * 70)
        print()
        
        # Localiza o execut√°vel
        exe_path = Path('dist') / f"{app_name}.exe"
        if exe_path.exists():
            exe_size = exe_path.stat().st_size / (1024 * 1024)  # MB
            print(f"üìÅ Localiza√ß√£o: {exe_path.absolute()}")
            print(f"üìä Tamanho: {exe_size:.2f} MB")
            print()
            print("üìã Pr√≥ximos passos:")
            print("   1. O execut√°vel est√° na pasta 'dist/'")
            print("   2. Copie o arquivo .exe para onde desejar")
            print("   3. Execute diretamente no Windows (sem instalar Python!)")
            print("   4. IMPORTANTE: O FFmpeg ainda precisa estar instalado no Windows")
            print()
            print("üí° Dica: Para distribuir, inclua instru√ß√µes de instala√ß√£o do FFmpeg")
            print("   Download: https://ffmpeg.org/download.html")
            print()
        else:
            print("‚ö†Ô∏è Execut√°vel gerado mas n√£o encontrado na pasta esperada")
            print("   Verifique a pasta 'dist/' manualmente")
        
    except subprocess.CalledProcessError as e:
        print()
        print("=" * 70)
        print("‚ùå ERRO AO GERAR EXECUT√ÅVEL")
        print("=" * 70)
        print(f"Detalhes: {e}")
        print()
        print("üîß Poss√≠veis solu√ß√µes:")
        print("   1. Certifique-se de que todas as depend√™ncias est√£o instaladas")
        print("   2. Execute: pip install -r requirements.txt")
        print("   3. Tente novamente")
        sys.exit(1)

if __name__ == '__main__':
    main()
